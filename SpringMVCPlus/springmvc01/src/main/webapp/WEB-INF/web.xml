<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!--
        声明，注册springmvc的核心对象DispatcherServlet，需要在Tomcat服务器启动后，
        创建  DispatcherServlet对象的实例。
        为什么要创建DispatcherServlet对象的实例呢？
            因为DispatcherServlet在他的创建过程中，会同时创建springmvc容器对象，
            读取springmvc的配置文件，把这个配置文件中的对象都创建好，当用户发起请求
            时就可以直接使用对象了

        servlet的初始化会执行init()方法，DispatcherServlet在init()方法中{
            // 创建容器，读取配置文件
            WebApplicationContext ctx = new ClassPathXmlApplicationContext("springmvc.xml");
            // 把容器对象放入到ServletContext中
            getServletContext().setAttribute(key, ctx);
        }

        启动Tomcat服务器出现错误，是因为springmvc在创建容器对象时，读取的配置
        文件默认是/WEB-INF/<servlet-name>-servlet.xml,这样子读取的方式并不灵活
        所以可以进行设置读取的路径
    -->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <!-- 自定义springmvc读取的配置文件的路径位置，
            classpath：类路径指的是 resources文件下
        -->
        <init-param>
            <!--  springmvc的配置文件的位置属性  -->
            <param-name>contextConfigLocation</param-name>
            <!--  指定自定义文件的位置  -->
            <param-value>classpath:servlet-context.xml</param-value>
        </init-param>

        <!--  设置在Tomcat启动后，创建servlet对象
              load-on-startup：表示启动加载并创建，数字表示Tomcat启动后创建对象的顺序
                               值是整数，数值越小，创建对象的时间越早，大于等于0的整数
        -->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <!--
            使用框架的时候，url-pattern可以使用两种值，
            1. 使用拓展名的方式，语法 *.xxx, xxx是自定义的拓展名，常用的方式是
                *.do, *.action, *.mvc等，
            2. 使用斜杠 "/"
            下面配置的url的意思是：表示 .do 形式的请求都交给springmvc这个servlet进行处理
        -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>


    <!--  未捕获的异常信息处理  -->
    <error-page>
        <exception-type>java.lang.Throwable</exception-type>
        <location>/500.jsp</location>
    </error-page>
    <error-page>
        <error-code>500</error-code>
        <location>/500.jsp</location>
    </error-page>
    <error-page>
        <error-code>404</error-code>
        <location>/404.jsp</location>
    </error-page>

</web-app>
