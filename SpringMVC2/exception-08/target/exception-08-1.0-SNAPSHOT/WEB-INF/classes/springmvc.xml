<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 声明组件扫描器   -->
    <context:component-scan base-package="com.liu.controller"/>

    <!-- 声明springmvc框架中的视图解析器，帮助开发人员
        设置视图文件的路径-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 前缀：视图文件的路径 -->
        <property name="prefix" value="/WEB-INF/view/"/>
        <!-- 后缀：视图文件的拓展名 -->
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--  添加json的注解驱动，将Object对象转为json数据形式，
        还可以解决  <mvc:default-servlet-handler/> 和  @RequestMapping的冲突
     -->
     <mvc:annotation-driven/>

    <!-- 处理异常的组件   -->
    <context:component-scan base-package="com.liu.handler"/>


    <!--  第一种处理静态资源的方式;
        需要在springmvc的配置文件中加入 <mvc:default-servlet-handler/>
        原理是：加入这个标签后，框架会创建控制器对象DefaultServletHttpRequestHandler(
            类似于我们自己创建的MyController处理器)
        DefaultServletHttpRequestHandler这个对象可以把接受的请求转发给 tomcat的default这个servlet
    -->
    <!--    <mvc:default-servlet-handler/>-->


    <!-- 第二种处理静态资源的方式（推荐）
        mvc:resources,加入后框架会自动的创建ResourceHTTPRequestHandler这个处理对象的请求
        让这个对象处理静态资源的访问，不依赖tomcat服务器
        mapping：访问静态资源的uri地址，使用通配符 **
        location：静态资源在你的项目中的目录地址

        /images/**:
            第一个 / :代表的是项目路径，即到webapp下，
            /**: 代表images目录下的所有文件都被处理
    -->
<!--    <mvc:resources mapping="/images/**" location="/images/"/>-->
<!--    <mvc:resources mapping="/js/**" location="/js/"/>-->
<!--    <mvc:resources mapping="/html/**" location="/html/"/>-->

    <mvc:resources mapping="/static/**" location="/static/"/>

</beans>